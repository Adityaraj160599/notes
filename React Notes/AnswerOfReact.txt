Mount and unMount -- > 
    The main job of React is to figure out how to modify the DOM to match what the components want to be rendered on the screen.
    React does so by "mounting" (adding nodes to the DOM), "unmounting" (removing them from the DOM),
    and "updating" (making changes to nodes already in the DOM).
    
    
---------------------------------------------------------------------------------------------------------------------------------
Hooks ----> 
  Hooks are the new feature introduced in the React 16.8 version. It allows you to
  use state and other React features without writing a class. Hooks are the functions
  which "hook into" React state and lifecycle features from function components. It
  does not work inside classes.
                            Hooks are backward-compatible, which means it does not 
 contain any breaking changes. Also, it does not replace your knowledge of React concepts.
 
---------------------------------------------------------------------------------------------------------------------------------

Rules Of Hooks -> 
   Hooks are similar to JavaScript functions, but you need to follow these two rules when using them.
   Hooks rule ensures that all the stateful logic in a component    is visible in its source code. These rules are:
     1. Only call Hooks at the top level
        Do not call Hooks inside loops, conditions, or nested functions.
        Hooks should always be used at the top level of the React functions. 
        This rule ensures that Hooks are called in the same order each time a components renders.
        
      2. Only call Hooks from React functions
        You cannot call Hooks from regular JavaScript functions. 
        Instead, you can call Hooks from React function components. 
        Hooks can also be called from custom Hooks.
        
-----------------------------------------------------------------------------------------------------------------------------
    
Diffrent Types of Hooks 

 1) useState() --> 
    useState to Create State Variables
        The useState hook allows us to create state variables in a React function component.
        State allows us to access and update certain values in our components over time
        When we create a state variable, we must provide it a default value (which can be any data type).
        We get that state variable as the first value in an array, which we can destructure and declare with const.
    Update State Variables
        useState also gives us a setter function to update the state after it is created.
        To update our state variable, we pass the setter function the new value we want our state to be.
        When you declare your setter function, in most cases you will prefix it with the word "set"
    Can Be Used Once Or Many Times  - > Yes 
    pdate State based on Previous Value  -> Yes
    Manage State with an Object ->  yes 
        const [ year , setYear ]  = useState({test:1})
        setYear({x:1})
        so testWill Gona Removed so we have to do setYear({...state,x:23})
        
        
2) useEffect Hook ---------->
      useEffect Hook Let you use side effect inside a function component 
      Side effects are when we need to reach into the outside world. Such as fetching data from an API or working with the DOM.
      Side effects are actions that can change our component state in an unpredictable fashion (that have caused 'side effects').
      useEffect accepts a callback function (called the 'effect' function), which will by default run every time the component re-renders
      
      useEffect lets us conditionally perform effects with the dependencies array.
      
   Run Again when a Value Changes
        useEffect lets us conditionally perform effects with the dependencies array.
        The dependencies array is the second argument passed to useEffect.
        If any one of the values in the array changes, the effect function runs again.
        If no values are included in the dependencies array, useEffect will only run on component mount and unmount.
   Fetch Data from an API 
    ``useEffect is the hook to use when you want to make an HTTP request (namely, a GET request when the component mounts).
        Note that handling promises with the more concise async/await syntax requires creating a separate function.
        This is because the effect callback function cannot be async.

    
    
3) . useRef Hook  ----> 
    useRef to Reference React Elements
    Refs are a special attribute that are available on all React components.
    They allow us to create a reference to a given element / component when the component mounts.
    useRef allows us to easily use React refs. They are helpful (as in the example below) 
    when we want to directly interact with an element, such as to clear its value or focus it, as with an input.
    We call useRef (at the top of a component) and attach the returned value to the element's ref attribute to refer to it.


4. useCallback Hook
    useCallback Prevents Callbacks from Being Recreated
    
5. useMemo Hook
6. useContext ------>
      The useContext hook is a great hook to use when you need to send props down through multiple, nested child components.
      Instead of passing it through every single component on the way down, you can define
      it in the parent component. Then, bring it into the nested component where you need it
      , while bypassing the middle components you’d normally have to send it through.
      
      Suppose You Have An app componet and you want to  pass a value to 5th child 
      app -> header -> profile -> user -> detials -> show 
      
      Now you gona do is pass using props but it is difficult to handle that situation 
      
      Create a context
            To start using useContext, you must first create a context.
            So, in our App (parent) component, we’ll import createContext from React. Then, create a user context. 
            
            With that UserContext in place, we can wrap a provider around components, then consume the property in any child component.
            
            Note that now, we’re not sending the user property into Profile. 
            We’re sending it into the UserContext Provider via value={user}. 
            We can then grab that value in any of the nested components.
      Consume the 
      
      Now import useContext and Context that we have create like UserContext 
      and then const user = useContext(userContext); 
      
      
        belog - https://medium.com/geekculture/react-hooks-usecontext-e8c468bce91a
        
        
        
7 ) useReducer -> 
https://www.freecodecamp.org/news/react-hooks-cheatsheet/

        
------------------------------------------------------------------------------------------------------------------

Pure Component - > 
    React.PureComponent is similar to React.Component. The difference between them is 
    that React.Component doesn’t implement shouldComponentUpdate(), but React.PureComponent
    implements it with a shallow prop and state comparison.

    If your React component’s render() function renders the same result
    given the same props and state, you can use React.PureComponent for a
    performance boost in some cases.

    React.PureComponent’s shouldComponentUpdate() only shallowly compares the objects
    . If these contain complex data structures, it may produce false-negatives for deeper differences.
    Only extend PureComponent when you expect to have simple props and state, or use forceUpdate() 
    when you know deep data structures have changed. Or, consider using immutable objects
    to facilitate fast comparisons of nested data.

    Furthermore, React.PureComponent’s shouldComponentUpdate() skips prop updates
    for the whole component subtree. Make sure all the children components are also “pure”.


In Class Component it is simple  class .. extends react.pureComponent 

Achiing Pure Component in react Functional Component 

    React.memo ->  As of React 16.6.0, memo has been added, so the answer is now:
    const C = React.memo(props => {
      return <var>{props.n}</var>
    })

    React.memo only checks for prop changes. If your function 
    component wrapped in React.memo has a useState, useReducer or 
    useContext Hook in its implementation, it will still rerender when state or context change.


-----------------------------------------------------------------------------------------------------------------
Achiveing Unmouting in class component ---> 

    componentWillUnmount() is invoked immediately before a component 
    is unmounted and destroyed. Perform any necessary cleanup in this method, 
    such as invalidating timers, canceling network requests, or cleaning up 
    any subscriptions that were created in componentDidMount().

    You should not call setState() in componentWillUnmount() because the component
    will never be re-rendered. Once a component instance is unmounted, it will never 
    be mounted again.


    If you add a return function inside the useEffect function,
    it is triggered when a component unmounts from the DOM. This looks like:
    import React, { useEffect } from 'react';
    const ComponentExample => () => {
        useEffect(() => {
            return () => {
                // Anything in here is fired on component unmount.
            }
        }, [])
    }




